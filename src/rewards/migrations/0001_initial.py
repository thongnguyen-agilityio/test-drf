# Generated by Django 3.0.4 on 2020-06-10 08:49

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django_extensions.db.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('products', '0001_initial'),
        ('customers', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Gift',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('archived', models.BooleanField(db_index=True, default=False)),
                ('is_active', models.BooleanField(default=True, help_text='This flag is used to determine that customer gift is activeor not. `True` is active; otherwise, `False`.')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='gift_created_by', to=settings.AUTH_USER_MODEL, verbose_name='Created by')),
                ('customer', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='customers.Customer')),
                ('last_modified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='gift_modified_by', to=settings.AUTH_USER_MODEL, verbose_name='Last modified by')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Reward',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('archived', models.BooleanField(db_index=True, default=False)),
                ('is_active', models.BooleanField(default=True, help_text='A flag for marking that reward is active or not')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reward_created_by', to=settings.AUTH_USER_MODEL, verbose_name='Created by')),
                ('last_modified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reward_modified_by', to=settings.AUTH_USER_MODEL, verbose_name='Last modified by')),
                ('membership', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='customers.Membership')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='GiftItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('archived', models.BooleanField(db_index=True, default=False)),
                ('quantity', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Number of item')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='giftitem_created_by', to=settings.AUTH_USER_MODEL, verbose_name='Created by')),
                ('gift', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='rewards.Gift')),
                ('last_modified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='giftitem_modified_by', to=settings.AUTH_USER_MODEL, verbose_name='Last modified by')),
                ('product', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='products.Product')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Coupon',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('archived', models.BooleanField(db_index=True, default=False)),
                ('kind', models.IntegerField(choices=[('PERCENTAGE', 0), ('MONEY', 1)], default=0, verbose_name='Coupon kind')),
                ('code', models.CharField(max_length=10, unique=True, verbose_name='Reward unique coupon code')),
                ('start_date', models.DateTimeField(blank=True, null=True, verbose_name='Valid date time')),
                ('end_date', models.DateTimeField(blank=True, null=True, verbose_name='Expire date time')),
                ('amount', models.FloatField(help_text='Depend on coupon kind. If coupon kind is percentage coupon, its value must be between 0 to 100. If coupon kind is money,its value must be greater than 0', validators=[django.core.validators.MinValueValidator(0)])),
                ('target_amount', models.FloatField(help_text='How much need to be bought to use coupon.', validators=[django.core.validators.MinValueValidator(0)])),
                ('is_minimum_purchase', models.BooleanField(default=True, help_text='This flag is used to determine when customer can use coupon.`True`: Coupon can be used when total amount on bill is greater than or equal `target amount`.`False`: Coupon can be used when total amount on bill isless than target amount.')),
                ('is_one_time_using', models.BooleanField(default=True, help_text='True if coupon is allowed one time using, `False` if it can be used all times.')),
                ('can_by_any_product', models.BooleanField(default=False, help_text='`True`: coupon can buy any product. `False`: coupon can buy products in the allowed list only.')),
                ('is_active', models.BooleanField(default=True, help_text='`True` if coupon is active; otherwise, `False`.')),
                ('is_expired', models.BooleanField(default=False, help_text='`True` if coupon is expired; otherwise, `False`.')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='coupon_created_by', to=settings.AUTH_USER_MODEL, verbose_name='Created by')),
                ('last_modified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='coupon_modified_by', to=settings.AUTH_USER_MODEL, verbose_name='Last modified by')),
                ('reward', models.ForeignKey(help_text='The reward that coupon belong to', on_delete=django.db.models.deletion.CASCADE, to='rewards.Reward')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
